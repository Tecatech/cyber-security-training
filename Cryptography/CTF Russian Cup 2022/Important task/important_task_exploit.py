#!/usr/bin/env python3
def to_bytes(val, len_reg):
    return [(val & (0xff << (8 * pos))) >> (8 * pos) for pos in range(len_reg - 1, -1, -1)]


def from_bytes(byte_arr):
    return sum(val << (8 * (len(byte_arr) - idx - 1)) for idx, val in enumerate(byte_arr))


def generate_table(poly):
    W = len(bin(poly)[2:]) - 1
    crc_table = []
    
    for byte in range(256):
        operator = (byte << (W - 8))
        mask = 1 << (W - 1)
        
        for bit in range(8):
            if operator & mask:
                operator <<= 1
                operator ^= poly
            else:
                operator <<= 1
        
        crc_table.append(to_bytes(operator, W // 8))
    
    return crc_table


def crc128(input, poly):
    W = len(bin(poly)[2:]) - 1
    len_reg = W // 8
    T = generate_table(poly)
    
    byte_arr = [ord(c) for c in input]
    reg = [0 for _ in range(len_reg)]
    
    for byte in byte_arr:
        idx = byte ^ reg.pop(0)
        reg.append(0)
        reg = [r ^ t for r, t in zip(reg, T[idx])]
    
    return from_bytes(reg)


def main():
    poly = 0x1fd731378020ec665bcf15be944e08f0b
    text = 'A very important task!!! Gotta drop the flag CUP{D3AdLiNs_It_Ea$Y}!!!'
    print(crc128(text, poly))


if __name__ == '__main__':
    main()