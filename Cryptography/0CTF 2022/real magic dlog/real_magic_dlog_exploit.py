#!/usr/bin/env python3
from Crypto.Util.number import *
import hashlib
import itertools
import math
from pwn import *
from sage.all import factor
import string
from sympy.ntheory import discrete_log

LEN = 17

def proof_of_work(prefix, digest):
    proof = string.ascii_letters + string.digits + '!#$%&*-?'
    for p in itertools.product(proof, repeat = 4):
        index = ''.join(p)
        if hashlib.sha256((index + prefix).encode()).hexdigest() == digest:
            return index

def handle():
    conn = remote('202.120.7.219', 15555)
    
    leak = conn.recv().decode().strip()
    prefix = leak.split('+')[1][1:].split(')')[0]
    digest = leak.split('==')[1][1:]
    conn.recvline()
    
    payload = proof_of_work(prefix, digest)
    conn.send(f'{payload}\n'.encode())
    
    magic = bytes.fromhex(conn.recv().decode().strip())
    magic_num = bytes_to_long(magic)
    log.success('magic_num: {}'.format(magic_num))
    
    offset = 384 - LEN * 8
    for bit in range(pow(2, offset)):
        P = (magic_num << offset) + bit
        if isPrime(P):
            log.success('P: {}'.format(P))
            break
    
    conn.recvuntil(b'P:>')
    conn.send(f'{P}\n'.encode())
    
    euler_phi = P - 1
    factors = factor(euler_phi)
    
    for num1 in range(1, P, 2):
        if pow(num1, euler_phi, P) != 1:
            continue
        
        is_root = True
        for p, _ in factors:
            l = euler_phi // p
            if pow(num1, l, P) == 1:
                is_root = False
                break
        if not is_root:
            continue
        
        try:
            data = num1.to_bytes((num1.bit_length() - 1) // 8 + 1, byteorder = 'big')
            num2 = int.from_bytes(hashlib.sha384(data).digest(), byteorder = 'big')
            if num2 >= P:
                continue
            
            E = discrete_log(P, num2 % P, num1 % P)
            log.success('E: {}'.format(E))
            
            conn.recvuntil(b'E:>')
            conn.send(f'{E}\n'.encode())
            
            conn.recvuntil(b'data:>')
            conn.send(f'{data.hex()}\n'.encode())
            
            conn.interactive()
            break
        except ValueError as error:
            continue

if __name__ == '__main__':
    handle()