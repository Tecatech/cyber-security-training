<?php

include_once 'Player.php';
include_once 'Opponent.php';
include_once 'PackOfCards.php';

class Desk
{
	const CARDS_IN_HAND = 6;
	private $cards;
	private $message;
	private $trump;
	private $whoPickUp;
	private $isDiscard;
	private $whichAction;

	public $player;
	public $opponent;
	public $packOfCards;

	private $finishMsg;

	public function __construct()
	{
		$this->cards = [];
		$this->isDiscard = false;
		$this->finishMsg = "";
	}

	public function __destruct()
	{
		if (isset($_SESSION['gameWinner'])) {
		  $this->updateInfo();
		  $this->player->updateInfo();
		  $this->finishMsg = $this->player->getInfo();
		}
	}

	public function startTheGame()
	{
		$this->packOfCards = new PackOfCards();
		$this->opponent = new Opponent();
		$this->player = new Player();

		$this->playersGetCards();

		$this->trump = $this->packOfCards->getTrump();
		$playerHand = $this->player->getHand();
		$opponentHand = $this->opponent->getHand();
		$playerLowestTrump = 10;
		$opponentLowestTrump = 10;

		foreach ($playerHand as $value) {
			if (substr($value, 1) == $this->trump) {
				$currentTrumpNum = substr($value, 0);
				if ($currentTrumpNum < $playerLowestTrump) {
					$playerLowestTrump = $currentTrumpNum;
				}
			}
		}
		foreach ($opponentHand as $value) {
			if (substr($value, 1) == $this->trump) {
				$currentTrumpNum = substr($value, 0);
				if ($currentTrumpNum < $opponentLowestTrump) {
					$opponentLowestTrump = $currentTrumpNum;
				}
			}
		}

		if ($playerLowestTrump <= $opponentLowestTrump) {
			$this->playerAttack();
		} else {
			$this->opponentAttack();
		}


		$this->addDataToSession();
		$this->packOfCards->addDataToSession();
		$this->player->addDataToSession();
		$this->opponent->addDataToSession();

		$_SESSION['game_started'] = True;
		header("Location: " . $_SERVER['PHP_SELF']);
	}

	public function continueTheGame()
	{
		$this->createObjects();

		if ($this->whichAction === 'attack' && !empty($_POST['card'])) {
			$this->player->passTheCard($_POST['card']);
			$this->cards[$_POST['card']] = $this->opponent->defense($_POST['card'],
				$this->trump);
			if ($this->cards[$_POST['card']] === 0) {
				$this->message = 'Can\'t beat this card!<br>Put some extra cards, or push "Take"';
				$this->whichAction = 'extraCard';
				$this->whoPickUp = 'opponent';
			} else {
				$this->whichAction = 'extraCard';
				$this->message = 'Your opponent beat this card.<br> Have you any extra cards?';
				$this->isDiscard = true;
				if (!$this->validatePlayerHand()) {
					$this->whoPickUp = 0;
				}
			}

			header("Location: " . $_SERVER['PHP_SELF']);
		} elseif ($this->whichAction == 'defense' && !empty($_POST['card'])) {
			$this->player->passTheCard($_POST['card']);

			end($this->cards);
			$key = key($this->cards);
			$this->cards[$key] = $_POST['card'];

			$extraCard = $this->opponent->passExtraCard($this->cards);
			if ($extraCard != 0) {
				$this->cards[$extraCard] = 0;
				$this->message = 'Your opponent pass an extra card to you!';
			} else {
				unset($this->cards);
				$this->whichAction = 'attack';
				$this->whoPickUp = 0;
				$this->message = 'Congratulations!<br> Now is your turn to attack!';
				$this->playersGetCards();
			}

			header("Location: " . $_SERVER['PHP_SELF']);
		} elseif ($this->whichAction == 'extraCard' && !empty($_POST['card'])) {
			$this->isDiscard = false;
			$this->whoPickUp = 'opponent';

			$this->player->passTheCard($_POST['card']);
			$this->cards[$_POST['card']] = 0;
			$this->message = 'Can\'t beat!<br>Pass more extra cards, <br>or just push "Take" button!';

			header("Location: " . $_SERVER['PHP_SELF']);
		}


		if (!empty($_POST['pick_up'])) {
			if ($_POST['pick_up'] === 'player') {
				foreach ($this->cards as $key => $value) {
					$this->player->pickUpCard($key);
					$this->player->pickUpCard($value);
				}
				unset($this->cards);
				unset($this->whoPickUp);
				$this->playersGetCards();
				$this->opponentAttack();

				header("Location: " . $_SERVER['PHP_SELF']);

			} else {
				foreach ($this->cards as $key => $value) {
					$this->opponent->pickUpCard($key);
					$this->opponent->pickUpCard($value);
				}
				unset($this->cards);
				unset($this->whoPickUp);

				$this->playerAttack();
				$this->player->addDataToSession();

				$this->playersGetCards();

				header("Location: " . $_SERVER['PHP_SELF']);
			}
		}

		if (!empty($_POST['discard'])) {
			unset($this->cards);
			$this->whoPickUp = 0;
			$this->whichAction = 'defense';

			$this->opponentAttack();
			$this->opponent->addDataToSession();

			$this->playersGetCards();

			header("Location: " . $_SERVER['PHP_SELF']);
		}

		//Pass data to the next loop
		$this->packOfCards->addDataToSession();
		$this->player->addDataToSession();
		$this->opponent->addDataToSession();
		$this->addDataToSession();
	}

	private function createObjects()
	{
		$this->player = unserialize($_COOKIE['Player']);
		$this->opponent = new Opponent($_SESSION['opponent']['hand']);
		$this->packOfCards = new PackOfCards(
					$_SESSION['PackOfCards']['numberOfCards'],
					$_SESSION['PackOfCards']['cardsInHand'],
					$_SESSION['PackOfCards']['pack'],
					$_SESSION['PackOfCards']['trumpCard'],
					$_SESSION['PackOfCards']['trump'],
					$_SESSION['PackOfCards']['dealCounter']
				);
		$this->trump = $this->packOfCards->trump;
	}

	private function validatePlayerHand()
	{
		if (count($this->cards) <= self::CARDS_IN_HAND) {
			$playerHand = $this->player->getHand();
			$uniqueNumbers = [];

			foreach ($this->cards as $bottomCard => $topCard) {
				$uniqueNumbers[substr($bottomCard, 0, 1)] = 0;
				$uniqueNumbers[substr($topCard, 0, 1)] = 0;
			}
			foreach ($uniqueNumbers as $key => $value) {
				if (is_array($playerHand)) {
					foreach ($playerHand as $card) {
						if ($key == substr($card, 0, 1)) {
							return true;
						}
					}

				} else {
					if ($key == substr($playerHand, 0, 1)) {
						return true;
					}
				}
			}
		}
		return false;
	}

	private function playersGetCards()
	{
		$this->player->setHand($this->packOfCards);
		$this->opponent->setHand($this->packOfCards);

	}

	private function playerAttack()
	{
		$this->isDiscard = false;
		$this->whoPickUp = 0;
		$this->whichAction = 'attack';
		$this->message = 'Your move!';
	}

	private function opponentAttack()
	{
		$putCardOnDesk = $this->opponent->attack($this->trump);
		$this->cards[$putCardOnDesk] = 0;
		$this->isDiscard = false;
		$this->whoPickUp = 'player';
		$this->whichAction = 'defense';
		$this->message = 'You have to beat the card, or pick it up';
	}

	public function validateCard($card)
	{
		$isValid = false;

		if (empty($this->cards)) {
			$isValid = true;
		} else {
			end($this->cards);
			$cardOnDesk = key($this->cards);

			if (substr($card, 1) == substr($cardOnDesk, 1)) {
				if (substr($card, 0) > substr($cardOnDesk, 0)) {
					$isValid = true;
				}
			} elseif (substr($card, 1) == $this->trump) {
				$isValid = true;
			}
		}
		return $isValid;
	}

	public function validateExtraCard($card)
	{
		$uniqueNumbers = [];

		foreach ($this->cards as $bottomCard => $topCard) {
			$uniqueNumbers[substr($bottomCard, 0, 1)] = 0;
			$uniqueNumbers[substr($topCard, 0, 1)] = 0;
		}
		foreach ($uniqueNumbers as $key => $value) {
			if ($key == substr($card, 0, 1)) {
				return true;
			}
		}
		return false;
	}

	public function renderHeader($active = False)
	{
		$output = '';
		$output .= '<!DOCTYPE html>';
		$output .= '<meta charset="utf-8">';
		$output .= '<head>';
		$output .= '<title>Durak - Card game</title>';
		$output .= '<link rel="stylesheet" type="text/css" href="/css/style.css">';
		$output .= '<script src="/js/jquery.js"></script>';
		$output .= '<script src="/js/animation.js"></script>';
		$output .= '</head>';

		$output .= '<div class="topnav">';
		$output .= '  <a class="active" href="/index.php">Home</a>';
		$output .= '  <a href="/leaderboard.php">Leaderboard</a>';
		$output .= '  <div class="login-container">';
		$output .= '    <form action="/login.php" method="post">';
		$output .= '      <button name="logout" value="logout" type="submit">Logout</button>';
		$output .= '    </form>';
		$output .= '  </div>';

		$output .= '</div>';

		return $output;
	}

	public function renderForm()
	{
		$filePath = '/var/www/templates/form.tpl.php';
		require_once $filePath;
	}

	public function renderFooter()
	{
		$output = '';
		$output .= '</body>';
		$output .= '</html>';
		return $output;
	}


	public function renderCards()
	{
		$output = '';
		if (!empty($this->cards)) {
			foreach ($this->cards as $key => $value) {
				$output .= '<div class="bottom-card"><img src="images/cards/' . $this->packOfCards->getName() . '/' . $key . '.png"></div>';
				if ($value != 0) {
					$output .= '<div class="top-card"><img src="images/cards/' . $this->packOfCards->getName() . '/' . $value . '.png"></div>';
				}
			}
		}
		return $output;
	}

	public function renderGameFinish()
	{
		$output = '';

		if ($_SESSION['gameWinner'] == 'player') {
			$message = 'Congratulations!<br>You win this game!';
		} else {
			$message = 'You lose this game.<br>Try next Time!';
		}

		$output .= '<div id="end-the-game">';
		$output .= '<div><h1>' . $message . '</h1></div>';
		$output .= '<div><img src="images/deck-of-cards-back.png"></div>';
		$output .= '<div><p>You have ' . $this->player->getInfo() . '</p></div>';
		$output .= '<a href="/">';
		$output .= '<button class="button">Finish</button>';
		$output .= '</a>';
		$output .= '</div>';

		$output .= '<div class="right centered">';
		$output .= '  <h3>Player info</h3>';
		$output .= '    <p> Username: ' . $_SESSION['name'] . '</p>';
		$output .= '    <p> User id: ' . $_SESSION['id'] . '</p>';
		$output .= '  <h3>Theme info</h3>';
		$output .= '  <p>Name: ' . $this->packOfCards->getName() . '</p>';
		$output .= '  <p>Description: ' . $this->packOfCards->getInfo() . '</p>';
		$output .= '</div>';


		$_SESSION['game_started'] = False;
		return $output;
	}

	public function getWhichAction()
	{
		return $this->whichAction;
	}

	private function addDataToSession()
	{
		$_SESSION['desk'] = serialize($this);
	}

	public function updateInfo(){
		require "config.inc.php";
		$sth = $conn->prepare("UPDATE games SET totalgames = totalgames+1");
		$sth->execute();
	}

	public function printMessage()
	{
		return $this->message;
	}

	public function renderPickUpButton()
	{
		$output = '<div>';
		if ($this->whoPickUp === 'player') {
			$output .= '<button class="button" name="pick_up" value="player" type="submit">Pick up cards</button>';
		} elseif ($this->whoPickUp === 'opponent') {
			$output .= '<button class="button" name="pick_up" value="opponent" type="submit">Take</button>';
		}
		$output .= '</div>';
		return $output;
	}

	public function renderDiscardButton()
	{
		$output = '<div>';
		if ($this->isDiscard) {
			$output .= '<button class="button" name="discard" value="discard" type="submit">Discard</button>';
		}
		$output .= '</div>';
		return $output;
	}
}
