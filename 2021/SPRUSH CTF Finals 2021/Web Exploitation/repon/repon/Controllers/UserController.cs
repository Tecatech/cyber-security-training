using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Text.Json;
using System.Text.Json.Serialization;
using repon.Models;
using System.IO;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.AspNetCore.Authorization;
using System.Text;

namespace repon.Controllers
{
    public class UserController : Controller
    {
        private readonly ILogger<UserController> _logger;
        private readonly IWebHostEnvironment _env;

        public UserController(ILogger<UserController> logger, IWebHostEnvironment env)
        {
            _logger = logger;
            _env = env;
        }

        [HttpGet]
        [Authorize(Roles = "User")]
        public async Task<IActionResult> Profile()
        {
            User user;
            using (ReponContext db = new ReponContext())
            {
                user = db.Users.FirstOrDefault(user => user.Name == User.Identity.Name);
                if (user == null)
                {
                    await ReponAuth.LogOut(HttpContext);
                    return Redirect("/account/login");
                }
            }
            return View(user);
        }

        [HttpGet]
        [Authorize(Roles = "User")]
        public IActionResult Pay()
        {
            return View();
        }

        [HttpPost]
        [Authorize(Roles = "User")]
        public async Task<IActionResult> Pay(RsaPost post)
        {
            byte[] publicKey = ReponRSA.GetRSABlob(_env);
            if (post.Message == null || post.Signature == null)
                return View(model: "FK THIS IS NULL");
            if (post.Signature.Length > 3072 || post.Message.Length > 96)
                return View(model: "SQ BIQ");
            byte[] signature = new byte[post.Signature.Length];
            byte[] message = new byte[post.Message.Length];
            using (Stream stream = post.Signature.OpenReadStream())
            {
                stream.Read(signature, 0, (int)post.Signature.Length);
            }
            using (Stream stream = post.Message.OpenReadStream())
            {
                stream.Read(message, 0, (int)post.Message.Length);
            }

            string json = Encoding.ASCII.GetString(message);
            Promocode promocode;
            try
            {
                promocode = JsonSerializer.Deserialize<Promocode>(json);
            }
            catch
            {
                return View(model: "ERROr DuRing PARSING");
            }
            if (promocode == null || promocode.Sum == 0 || promocode.Ui == null || promocode.Name == null || promocode.Ui == "" || promocode.Name == "")
                return View(model: "NULLING");
            if (!ReponRSA.VerifySignature(publicKey, message, signature))
                return View(model: "NOTVERIFIED");
            if (promocode.Name != User.Identity.Name && promocode.Name != "prc")
                return View(model: "BADUSER");
            using (ReponContext db = new ReponContext())
            {
                if (promocode.Name == User.Identity.Name)
                {
                    Promocode findindb = db.Promocodes.FirstOrDefault(p => promocode.Ui == p.Ui);
                    if (findindb != null)
                        return View(model: "ALREADY_BOUGHTED");
                }
                else if (promocode.Name == "prc")
                {
                    Promocode findindb = db.Promocodes.FirstOrDefault(p => User.Identity.Name == p.Name);
                    promocode.Name = User.Identity.Name;
                    if (findindb != null)
                        return View(model: "ALREADY_BOUGHTED");
                }
                User user = db.Users.FirstOrDefault(user => user.Name == User.Identity.Name);
                if (user == null)
                {
                    await ReponAuth.LogOut(HttpContext);
                    return View(model: "SMTH WWWRONK");
                }
                user.Money += promocode.Sum;
                db.Users.Update(user);
                db.Promocodes.Add(promocode);
                db.SaveChanges();
            }
            return Redirect("/user/profile");
        }

        [HttpGet]
        [Authorize(Roles = "User")]
        public IActionResult ViewRequests()
        {
            List<OrderModel> myOrders = new List<OrderModel>();
            using (ReponContext db = new ReponContext())
            {
                IEnumerable<Order> myOrdersL = db.Orders.ToList();
                foreach (Order order in myOrdersL)
                {
                    User driver = db.Users.FirstOrDefault(c => c.Id == order.DriverId);
                    myOrders.Add(new OrderModel() { DriverUid = driver.Password, Id = order.Id, Price = order.Price });
                }
            }
            return View(myOrders);
        }

        [HttpPost]
        [Authorize(Roles = "User")]
        public IActionResult UseTaxi(int orderid)
        {
            using (ReponContext db = new ReponContext())
            {
                Order order = db.Orders.FirstOrDefault(c => c.Id == orderid);
                User user = db.Users.FirstOrDefault(c => c.Name == User.Identity.Name);
                if (user == null || order == null || order.Price > user.Money)
                {
                    return Redirect("/user/viewrequests");
                }
                user.Money -= order.Price;
                order.CustomerId = user.Id;
                db.Users.Update(user);
                db.Orders.Update(order);
                db.SaveChanges();
            }
            return Redirect("/user/myorders");
        }

        [HttpGet]
        [Authorize(Roles = "User")]
        public IActionResult MyOrders()
        {
            List<OrderModel> myOrders = new List<OrderModel>();
            using (ReponContext db = new ReponContext())
            {
                User user = db.Users.FirstOrDefault(c => c.Name == User.Identity.Name);
                if (user == null)
                    return Redirect("/home/index");
                IEnumerable<Order> myOrdersL = db.Orders.Where(c => c.CustomerId == user.Id).ToList();
                foreach (Order order in myOrdersL)
                {
                    User driver = db.Users.FirstOrDefault(c => c.Id == order.DriverId);
                    myOrders.Add(new OrderModel() { DriverUid = driver.Password, Comment = order.DriverComment });
                }
            }
            return View(myOrders);
        }

        [HttpGet]
        [Authorize(Roles = "User")]
        public IActionResult Feedback()
        {
            string feedback = "";
            using (ReponContext db = new ReponContext())
            {
                User user = db.Users.FirstOrDefault(c => c.Name == User.Identity.Name);
                if (user == null)
                    return Redirect("/home/index");
                feedback = user.Feedback;
            }
            return View(model: feedback);
        }

        [HttpPost]
        [Authorize(Roles = "User")]
        public IActionResult Feedback(string feedback)
        {
            if (feedback == null || feedback == "")
                return Redirect("/home/index");
            using (ReponContext db = new ReponContext())
            {
                User user = db.Users.FirstOrDefault(c => c.Name == User.Identity.Name);
                if (user == null)
                    return Redirect("/home/index");
                if (user.Feedback != "")
                    return Redirect("/home/index");
                user.Feedback = feedback;
                db.Users.Update(user);
                db.SaveChanges();
            }
            return View(model: feedback);
        }

        [HttpGet]
        [Authorize(Roles = "User")]
        public IActionResult GetMessage()
        {
            var net = new System.Net.WebClient();
            var data = net.DownloadData("wwwroot/data/Message");
            var content = new System.IO.MemoryStream(data);
            var contentType = "APPLICATION/octet-stream";
            var fileName = "Message";
            return File(content, contentType, fileName);
        }

        [HttpGet]
        [Authorize(Roles = "User")]
        public IActionResult GetSignature()
        {
            var net = new System.Net.WebClient();
            var data = net.DownloadData("wwwroot/data/Signature.db");
            var content = new System.IO.MemoryStream(data);
            var contentType = "APPLICATION/octet-stream";
            var fileName = "Signature.db";
            return File(content, contentType, fileName);
        }
    }
}
