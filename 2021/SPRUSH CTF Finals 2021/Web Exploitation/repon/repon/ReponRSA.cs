using Microsoft.AspNetCore.Hosting;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Resources;
using System.Security.Cryptography;
using System.Threading.Tasks;

namespace repon
{
    public class ReponRSA
    {
        public static RSACryptoServiceProvider GetRSA(IWebHostEnvironment env)
        {
            RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
            byte[] blob = GetRSABlob(env);
            rsa.ImportCspBlob(blob);
            return rsa;
        }

        public static byte[] GetRSABlob(IWebHostEnvironment env)
        {
            
            string filepath = env.ContentRootPath + "/PubKey.db";
            if (File.Exists(filepath))
            {
                byte[] blob = File.ReadAllBytes(filepath);
                return blob;
            }
            else
            {
                throw new Exception("PublicKey.db: File not found");
            }
        }

        public static bool VerifySignature(RSACryptoServiceProvider rsa, byte[] message, byte[] signature)
        {
            int signcount = (int)Math.Ceiling(message.Length / (double)4);
            int signlen = signcount * 128;
            if (signature.Length != signlen)
                return false;
            for (int i = 0; i < signcount; i++)
            {
                int offset = i * 4;
                int offsetSign = i * 128;
                byte[] block = new byte[4];
                byte[] signBlock = new byte[128];
                Array.Copy(message, offset, block, 0, message.Length - i * 4 >= 4 ? 4 : message.Length - i * 4);
                Array.Copy(signature, offsetSign, signBlock, 0, 128);
                if (!rsa.VerifyData(block, signBlock, HashAlgorithmName.MD5, RSASignaturePadding.Pkcs1))
                {
                    return false;
                }
            }
            return true;
        }

        public static bool VerifySignature(byte[] blob, byte[] message, byte[] signature)
        {
            RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
            rsa.ImportCspBlob(blob);
            return VerifySignature(rsa, message, signature);
        }
    }
}
