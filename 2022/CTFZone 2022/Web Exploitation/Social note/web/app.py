#!/usr/bin/env python3
from flask import Flask, url_for, redirect
from flask import render_template, abort, flash
from flask_login import current_user, LoginManager
from flask_login import login_user, logout_user, login_required

from flask_dance.contrib.github import make_github_blueprint
from flask_dance.contrib.gitlab import make_gitlab_blueprint
from flask_dance.contrib.discord import make_discord_blueprint
from flask_dance.contrib.reddit import make_reddit_blueprint
from flask_dance.consumer import oauth_authorized, oauth_error
from flask_dance.consumer.storage.sqla import SQLAlchemyStorage

from flask_sqlalchemy import SQLAlchemy
from flask_login import UserMixin
from flask_dance.consumer.storage.sqla import OAuthConsumerMixin
from sqlalchemy.orm.exc import NoResultFound

from flask_bootstrap import Bootstrap
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField, SelectField, BooleanField
from wtforms.widgets import TextArea
from wtforms.validators import InputRequired, Email, Length
import wtf_helpers
from werkzeug.security import generate_password_hash, check_password_hash
from werkzeug.middleware.proxy_fix import ProxyFix
import secrets
from config import Config

app = Flask(__name__)
app.config.from_object(Config())
app.wsgi_app = ProxyFix(app.wsgi_app, x_for=1, x_proto=1)

Bootstrap(app)
wtf_helpers.add_helpers(app)

db = SQLAlchemy(app)

class DeleteUser(FlaskForm):
    submit_button = SubmitField('Delete user')

class NoteForm(FlaskForm):
    note_name = StringField('Note name',
                            widget=TextArea(),
                            validators=[InputRequired()],
                            render_kw={'style': 'width: 45ch; height: 5ch'},)
    submit_button = SubmitField('Add note')

class ShareForm(FlaskForm):
    username = SelectField('username',
                            coerce=str,
                            choices=[],
                            render_kw={'style': 'width: 28ch'})
    note_id = SelectField(  'Note id',
                            coerce=int,
                            choices=[])
    submit_button = SubmitField('Share', render_kw={'style': 'width: 20ch'})


# setup db
class Note(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    note_name = db.Column(db.String(1024))
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))

    def __init__(self, note, user):
        self.note_name = note
        self.user_id = user.id

    def __repr__(self):
        return f"<{self.note_name}>"

class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64))
    password = db.Column(db.String(256))
    notes = db.relationship('Note', backref='user', lazy='dynamic')

class OAuth(OAuthConsumerMixin, db.Model):
    provider_user_id = db.Column(db.String(256), unique=True, nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey(User.id), nullable=False)
    user = db.relationship(User)

db.create_all()
try:
    db.session.commit()
except sqlalchemy.exc.IntegrityError:
    # tables already created
    pass

# setup login manager
class LoginForm(FlaskForm):
    username = StringField('username', validators=[InputRequired(), Length(min=4, max=64)])
    password = PasswordField('password', validators=[InputRequired(), Length(min=5, max=64)])
    remember = BooleanField('remember me')

class RegisterForm(FlaskForm):
    username = StringField('username', validators=[InputRequired(), Length(min=4, max=20)])
    password = PasswordField('password', validators=[InputRequired(), Length(min=5, max=80)])

login_manager = LoginManager()
login_manager.login_view = "login"
login_manager.init_app(app)

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# setup oauth
blueprints = {}

blueprints["github"] = make_github_blueprint(
                                scope=["user"],
                                storage=SQLAlchemyStorage(OAuth, db.session, user=current_user),
                            )

blueprints["gitlab"] = make_gitlab_blueprint(
                                scope=["read_user"],
                                storage=SQLAlchemyStorage(OAuth, db.session, user=current_user),
                            )

blueprints["discord"] = make_discord_blueprint(
                            scope=["identify"],
                            storage=SQLAlchemyStorage(OAuth, db.session, user=current_user),
                        )

blueprints["reddit"] = make_reddit_blueprint(
                            scope=["identity"],
                            storage=SQLAlchemyStorage(OAuth, db.session, user=current_user),
                        )

for blueprint in blueprints.values():
    app.register_blueprint(blueprint, url_prefix="/login")


@oauth_authorized.connect_via(blueprints["github"])
def github_logged_in(blueprint, token):
    if not token:
        flash("Failed to log in.", category="error")
        return False

    resp = blueprint.session.get("/user")
    if not resp.ok:
        msg = "Failed to fetch user info."
        flash(msg, category="error")
        return False

    info = resp.json()
    user_id = str(info["id"])
    username=info["login"]

    query = OAuth.query.filter_by(provider=blueprint.name, provider_user_id=user_id)
    try:
        oauth = query.one()
    except NoResultFound:
        oauth = OAuth(provider=blueprint.name, provider_user_id=user_id, token=token)

    if oauth.user:
        login_user(oauth.user)
        flash("Successfully signed in.")
    else:
        user = User(username=username, password=generate_password_hash(secrets.token_hex(16)))
        oauth.user = user
        db.session.add_all([user, oauth])
        db.session.commit()

        login_user(user)
        flash("Successfully signed in.")

    return False


@oauth_authorized.connect_via(blueprints["gitlab"])
def gitlab_logged_in(blueprint, token):
    if not token:
        flash("Failed to log in.", category="error")
        return False

    resp = blueprint.session.get("/api/v4/user")
    if not resp.ok:
        msg = "Failed to fetch user info."
        flash(msg, category="error")
        return False

    info = resp.json()
    user_id = str(info["id"])
    username=info["username"]
    query = OAuth.query.filter_by(provider=blueprint.name, provider_user_id=user_id)
    try:
        oauth = query.one()
    except NoResultFound:
        oauth = OAuth(provider=blueprint.name, provider_user_id=user_id, token=token)

    if oauth.user:
        login_user(oauth.user)
        flash("Successfully signed in.")
    else:
        user = User(username=username, password=generate_password_hash(secrets.token_hex(16)))
        oauth.user = user
        db.session.add_all([user, oauth])
        db.session.commit()

        login_user(user)
        flash("Successfully signed in.")

    return False


@oauth_authorized.connect_via(blueprints["discord"])
def discord_logged_in(blueprint, token):
    if not token:
        flash("Failed to log in.", category="error")
        return False

    resp = blueprint.session.get("/api/users/@me")
    if not resp.ok:
        msg = "Failed to fetch user info."
        flash(msg, category="error")
        return False

    info = resp.json()
    user_id = info["id"]
    username = info["username"]

    query = OAuth.query.filter_by(provider=blueprint.name, provider_user_id=user_id)
    try:
        oauth = query.one()
    except NoResultFound:
        oauth = OAuth(provider=blueprint.name, provider_user_id=user_id, token=token)

    if oauth.user:
        login_user(oauth.user)
        flash("Successfully signed in.")

    else:
        user = User(username=username, password=generate_password_hash(secrets.token_hex(16)))
        oauth.user = user
        db.session.add_all([user, oauth])
        db.session.commit()
        login_user(user)
        flash("Successfully signed in.")

    return False


@oauth_authorized.connect_via(blueprints["reddit"])
def reddit_logged_in(blueprint, token):
    if not token:
        flash("Failed to log in.", category="error")
        return False

    resp = blueprint.session.get("/api/v1/me")
    if not resp.ok:
        msg = "Failed to fetch user info."
        flash(msg, category="error")
        return False

    info = resp.json()
    user_id = str(info["id"])
    username = info["name"]

    query = OAuth.query.filter_by(provider=blueprint.name, provider_user_id=user_id)
    try:
        oauth = query.one()
    except NoResultFound:
        oauth = OAuth(provider=blueprint.name, provider_user_id=user_id, token=token)

    if oauth.user:
        login_user(oauth.user)
        flash("Successfully signed in.")

    else:
        user = User(username=username, password=generate_password_hash(secrets.token_hex(16)))
        oauth.user = user
        db.session.add_all([user, oauth])
        db.session.commit()
        login_user(user)
        flash("Successfully signed in.")

    return False


@app.route("/")
def index():
    count_users = User.query.count()
    count_notes = Note.query.count()
    return render_template("index.html", count_users=count_users, count_notes=count_notes)

@app.route("/login", methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if not user:
            flash("Failed to log in.", category="error")
            return redirect(url_for("login"))
        if check_password_hash(user.password, form.password.data):
            login_user(user, remember=form.remember.data)
            return redirect(url_for('index'))
        else:
            flash("Failed to log in.", category="error")
            return redirect(url_for("login"))
    return render_template("login_user.html", form=form)

@app.route("/register", methods=['GET', 'POST'])
def register():
    form = RegisterForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if user:
            flash("Register failed.", category="error")
            return redirect(url_for("register"))
        hashed_password = generate_password_hash(form.password.data)
        new_user = User(username=form.username.data, password=hashed_password)
        db.session.add(new_user)
        db.session.commit()
        flash("Register success.")
        return redirect(url_for("login"))

    return render_template("register_user.html", form=form)

@app.route("/logout")
def logout():
    if not current_user.is_authenticated:
        return redirect(url_for("index"))
    logout_user()
    flash("You have logged out")
    return redirect(url_for("index"))


@app.route("/delete", methods=["POST"])
def delete():
    if not current_user.is_authenticated:
        return redirect(url_for("index"))

    user = User.query.filter_by(id=current_user.id).first_or_404()
    if user != current_user or current_user.id == 1:
        return abort(403)

    Note.query.filter_by(user_id=user.id).delete()
    OAuth.query.filter_by(user_id=user.id).delete()
    db.session.delete(user)
    db.session.commit()

    logout_user()
    flash("User successfuly deleted")
    return redirect(url_for("index"))


@app.route("/notes/share", methods=["POST"])
def share():
    if not current_user.is_authenticated:
        return redirect(url_for("index"))

    share_form = ShareForm()
    if share_form.is_submitted() and share_form.note_id.data and share_form.username.data:
        owner_user = User.query.filter_by(username=current_user.username).first()
        share_user = User.query.filter_by(username=share_form.username.data).first()

        note_id = owner_user.notes.with_entities(Note.id)[share_form.note_id.data-1][0]
        note = owner_user.notes.filter_by(id=note_id).first()

        if owner_user and share_user and note:
            shared_note = Note(note.note_name, share_user)
            db.session.add(shared_note)
            db.session.commit()
            flash("Note shared", category="info")
        else:
            flash(f"Error sharing note", category="error")

    return redirect(url_for("notes", username=current_user.username))


@app.route("/notes/<username>", methods=["GET", "POST"])
def notes(username):
    if not current_user.is_authenticated:
        return redirect(url_for("index"))
    user = User.query.filter_by(username=username).first_or_404()
    if user != current_user:
        return abort(403)

    note_form = NoteForm()
    delete_user = DeleteUser()
    share_form = ShareForm()
    share_form.note_id.choices = range(1, Note.query.filter_by(user_id=user.id).count()+1)
    share_form.username.choices = [u[0] for u in User.query.with_entities(User.username).distinct()]

    if note_form.validate_on_submit():
        note = Note(note_form.note_name.data, user)
        db.session.add(note)
        db.session.commit()
        flash("Note saved", category="info")
        return redirect(url_for("notes", username=username))

    return render_template("notes.html", form=note_form, share_form=share_form, list_of_notes=user.notes, username=username, delete_user=delete_user)


if __name__ == "__main__":
    app.run("0.0.0.0", port=5000)
